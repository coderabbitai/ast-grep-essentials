id: scala-jwt-hardcoded-secret-scala
valid:
  - |
invalid:
  - |
    import com.auth0.jwt.algorithms.Algorithm
    class App {
      def bad1(): Unit = {
        try {
          val algorithm = Algorithm.HMAC256("secret")
          val token = JWT.create()
            .withIssuer("auth0")
            .sign(algorithm)
        } catch {
          case exception: JWTCreationException => 
            println(s"Error creating JWT: ${exception.getMessage}")
        }
      }
    }
  - |
    import com.auth0.jwt.algorithms.Algorithm
    class SessionService {
      def createSessionToken(userId: String): String = {
          try {
              val algorithm = Algorithm.HMAC512("secretKey")
              val token = JWT.create()
                  .withIssuer("auth0")
                  .withClaim("userId", userId)
                  .sign(algorithm)
              token
          } catch {
              case e: JWTCreationException => 
              ""
          }
      }
    }
  - |
    import com.auth0.jwt.algorithms.Algorithm
    class AuthService {
      def createAuthToken(username: String): String = {
        try {
          val algorithm = Algorithm.HMAC384("secretKey")
          val token = JWT.create()
              .withIssuer("auth0")
              .withClaim("username", username)
              .sign(algorithm)
          token
        } catch {
            case e: JWTCreationException => 
        }
      }
    }
