id: jwt-hardcoded-secret-csharp
valid:
  - |
    public void OkJwtTest6(){
      string secret = GetSecretFromEnvironmentVariable();
      var token = JwtBuilder.Create()
          .WithAlgorithm(new HMACSHA256Algorithm())
          .WithSecret(secret)  
          .AddClaim("user", "george")
          .AddClaim("permissions", "full_access")
          .Encode();
      Console.WriteLine(token);
    }
invalid:
  - |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest13(){
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJsonSerializer serializer = new JsonNetSerializer();
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
        var token = encoder.Encode(new Dictionary<string, object>
        {
            { "user", "alice" },
            { "permissions", "read, write" }
        }, "hardcodedJWTSecret987");
        Console.WriteLine(token);
      }
    }
  - |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest17(){
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJsonSerializer serializer = new JsonNetSerializer();
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
        var token = encoder.Encode(new Dictionary<string, object>
        {
            { "sub", "user123" },
            { "scope", "admin" }
        }, "secretkey2024");

        Console.WriteLine(token);
      }
    }
  - |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest20(){
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJsonSerializer serializer = new JsonNetSerializer();
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
        var token = encoder.Encode(new Dictionary<string, object>
        {
            { "userId", "999" },
            { "role", "admin" }
        }, "hardcodedTokenSecret987");
        Console.WriteLine(token);
      }
    }
  - |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest1(){
        var payload = new Dictionary<string, object>
        {
            { "claim1", 0 },
            { "claim2", "claim2-value" }
        };
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJsonSerializer serializer = new JsonNetSerializer();
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
        const string key = "razdvatri";
        var token = encoder.Encode(payload, key);
        Console.WriteLine(token);
      }
    }
  - |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest2(){
        IJsonSerializer serializer = new JsonNetSerializer();
        IDateTimeProvider provider = new UtcDateTimeProvider();
        IJwtValidator validator = new JwtValidator(serializer, provider);
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
        var json = decoder.Decode(token, "secret123");
        Console.WriteLine(json);
      }
    }
