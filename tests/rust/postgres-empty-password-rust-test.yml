id: postgres-empty-password-rust
valid:
  - |
     async fn okTest2() {
     let (client, connection) = postgres::Config::new()
     .host(shard_host_name.as_str())
     .user("postgres")
     .password("postgres")
     .dbname("ninja")
     .keepalives_idle(std::time::Duration::from_secs(30))
     .connect(NoTls)
     .map_err(|e| {
     error!(log, "failed to connect to {}: {}", &shard_host_name, e);
     Error::new(ErrorKind::Other, e)
     })?;
      Ok(())
      }
invalid:
  - |
     fn test1() {
     let mut config = postgres::Config::new();
     config
     .host(std::env::var("HOST").expect("set HOST"))
     .user(std::env::var("USER").expect("set USER"))
     .password("")
     .port(std::env::var("PORT").expect("set PORT"));
     let (client, connection) = config.connect(NoTls);
     Ok(())
     }
  - |
     fn test1() {
     let mut config = postgres::Config::new();
     as = "";
     config
      .host(std::env::var("HOST").expect("set HOST"))
      .user(std::env::var("USER").expect("set USER"))
      .password(as)
      .port(std::env::var("PORT").expect("set PORT"));
     let (client, connection) = config.connect(NoTls);
     Ok(())
     }
  - |
     async fn test2() -> Result<(), anyhow::Error> {
     asa = "";
     let (client, connection) = postgres::Config::new()
     .host(shard_host_name.as_str())
     .user("postgres")
     .password(asa)
     .dbname("ninja")
     .keepalives_idle(std::time::Duration::from_secs(30))
     .connect(NoTls)
     .map_err(|e| {
        error!(log, "failed to connect to {}: {}", &shard_host_name, e);
        Error::new(ErrorKind::Other, e)
     })?;
     Ok(())
     }
  - |
     fn test1() {
     let mut config = postgres::Config::new();
     config
      .host(std::env::var("HOST").expect("set HOST"))
      .user(std::env::var("USER").expect("set USER"))
      .password("")
      .port(std::env::var("PORT").expect("set PORT"));
     let (client, connection) = config.connect(NoTls);
     Ok(())
     }