id: scala-jwt-hardcoded-secret-scala
snapshots:
  ? "import com.auth0.jwt.algorithms.Algorithm\nclass App {\n  def bad1(): Unit = {\n    try {\n      val algorithm = Algorithm.HMAC256(\"secret\")\n      val token = JWT.create()\n        .withIssuer(\"auth0\")\n        .sign(algorithm)\n    } catch {\n      case exception: JWTCreationException => \n        println(s\"Error creating JWT: ${exception.getMessage}\")\n    }\n  }\n}\n"
  : labels:
    - source: Algorithm.HMAC256("secret")
      style: primary
      start: 109
      end: 136
    - source: '"secret"'
      style: secondary
      start: 127
      end: 135
    - source: ("secret")
      style: secondary
      start: 126
      end: 136
    - source: Algorithm.HMAC256
      style: secondary
      start: 109
      end: 126
    - source: import com.auth0.jwt.algorithms.Algorithm
      style: secondary
      start: 0
      end: 41
    - source: import com.auth0.jwt.algorithms.Algorithm
      style: secondary
      start: 0
      end: 41
  ? "import com.auth0.jwt.algorithms.Algorithm\nclass AuthService {\n  def createAuthToken(username: String): String = {\n    try {\n      val algorithm = Algorithm.HMAC384(\"secretKey\")\n      val token = JWT.create()\n          .withIssuer(\"auth0\")\n          .withClaim(\"username\", username)\n          .sign(algorithm)\n      token\n    } catch {\n        case e: JWTCreationException => \n    }\n  }\n}\n"
  : labels:
    - source: Algorithm.HMAC384("secretKey")
      style: primary
      start: 146
      end: 176
    - source: '"secretKey"'
      style: secondary
      start: 164
      end: 175
    - source: ("secretKey")
      style: secondary
      start: 163
      end: 176
    - source: Algorithm.HMAC384
      style: secondary
      start: 146
      end: 163
    - source: import com.auth0.jwt.algorithms.Algorithm
      style: secondary
      start: 0
      end: 41
    - source: import com.auth0.jwt.algorithms.Algorithm
      style: secondary
      start: 0
      end: 41
  ? "import com.auth0.jwt.algorithms.Algorithm\nclass SessionService {\n  def createSessionToken(userId: String): String = {\n      try {\n          val algorithm = Algorithm.HMAC512(\"secretKey\")\n          val token = JWT.create()\n              .withIssuer(\"auth0\")\n              .withClaim(\"userId\", userId)\n              .sign(algorithm)\n          token\n      } catch {\n          case e: JWTCreationException => \n          \"\"\n      }\n  }\n}\n"
  : labels:
    - source: Algorithm.HMAC512("secretKey")
      style: primary
      start: 156
      end: 186
    - source: '"secretKey"'
      style: secondary
      start: 174
      end: 185
    - source: ("secretKey")
      style: secondary
      start: 173
      end: 186
    - source: Algorithm.HMAC512
      style: secondary
      start: 156
      end: 173
    - source: import com.auth0.jwt.algorithms.Algorithm
      style: secondary
      start: 0
      end: 41
    - source: import com.auth0.jwt.algorithms.Algorithm
      style: secondary
      start: 0
      end: 41
