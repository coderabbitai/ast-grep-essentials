id: jwt-hardcoded-secret-csharp
snapshots:
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest1(){
        var payload = new Dictionary<string, object>
        {
            { "claim1", 0 },
            { "claim2", "claim2-value" }
        };
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJsonSerializer serializer = new JsonNetSerializer();
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
        const string key = "razdvatri";
        var token = encoder.Encode(payload, key);
        Console.WriteLine(token);
      }
    }
  : labels:
    - source: encoder.Encode(payload, key)
      style: primary
      start: 533
      end: 561
    - source: encoder
      style: secondary
      start: 533
      end: 540
    - source: Encode
      style: secondary
      start: 541
      end: 547
    - source: encoder.Encode
      style: secondary
      start: 533
      end: 547
    - source: key
      style: secondary
      start: 557
      end: 560
    - source: key
      style: secondary
      start: 557
      end: 560
    - source: (payload, key)
      style: secondary
      start: 547
      end: 561
    - source: IJwtEncoder
      style: secondary
      start: 408
      end: 419
    - source: encoder
      style: secondary
      start: 420
      end: 427
    - source: encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 420
      end: 479
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 408
      end: 479
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 408
      end: 480
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 408
      end: 480
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: key
      style: secondary
      start: 498
      end: 501
    - source: razdvatri
      style: secondary
      start: 505
      end: 514
    - source: '"razdvatri"'
      style: secondary
      start: 504
      end: 515
    - source: key = "razdvatri"
      style: secondary
      start: 498
      end: 515
    - source: const string key = "razdvatri";
      style: secondary
      start: 485
      end: 516
    - source: const string key = "razdvatri";
      style: secondary
      start: 485
      end: 516
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest13(){
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJsonSerializer serializer = new JsonNetSerializer();
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
        var token = encoder.Encode(new Dictionary<string, object>
        {
            { "user", "alice" },
            { "permissions", "read, write" }
        }, "hardcodedJWTSecret987");
        Console.WriteLine(token);
      }
    }
  : labels:
    - source: |-
        encoder.Encode(new Dictionary<string, object>
            {
                { "user", "alice" },
                { "permissions", "read, write" }
            }, "hardcodedJWTSecret987")
      style: primary
      start: 374
      end: 527
    - source: encoder
      style: secondary
      start: 374
      end: 381
    - source: Encode
      style: secondary
      start: 382
      end: 388
    - source: encoder.Encode
      style: secondary
      start: 374
      end: 388
    - source: hardcodedJWTSecret987
      style: secondary
      start: 504
      end: 525
    - source: '"hardcodedJWTSecret987"'
      style: secondary
      start: 503
      end: 526
    - source: '"hardcodedJWTSecret987"'
      style: secondary
      start: 503
      end: 526
    - source: |-
        (new Dictionary<string, object>
            {
                { "user", "alice" },
                { "permissions", "read, write" }
            }, "hardcodedJWTSecret987")
      style: secondary
      start: 388
      end: 527
    - source: IJwtEncoder
      style: secondary
      start: 285
      end: 296
    - source: encoder
      style: secondary
      start: 297
      end: 304
    - source: encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 297
      end: 356
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 285
      end: 356
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 285
      end: 357
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 285
      end: 357
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest17(){
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJsonSerializer serializer = new JsonNetSerializer();
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
        var token = encoder.Encode(new Dictionary<string, object>
        {
            { "sub", "user123" },
            { "scope", "admin" }
        }, "secretkey2024");

        Console.WriteLine(token);
      }
    }
  : labels:
    - source: |-
        encoder.Encode(new Dictionary<string, object>
            {
                { "sub", "user123" },
                { "scope", "admin" }
            }, "secretkey2024")
      style: primary
      start: 374
      end: 508
    - source: encoder
      style: secondary
      start: 374
      end: 381
    - source: Encode
      style: secondary
      start: 382
      end: 388
    - source: encoder.Encode
      style: secondary
      start: 374
      end: 388
    - source: secretkey2024
      style: secondary
      start: 493
      end: 506
    - source: '"secretkey2024"'
      style: secondary
      start: 492
      end: 507
    - source: '"secretkey2024"'
      style: secondary
      start: 492
      end: 507
    - source: |-
        (new Dictionary<string, object>
            {
                { "sub", "user123" },
                { "scope", "admin" }
            }, "secretkey2024")
      style: secondary
      start: 388
      end: 508
    - source: IJwtEncoder
      style: secondary
      start: 285
      end: 296
    - source: encoder
      style: secondary
      start: 297
      end: 304
    - source: encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 297
      end: 356
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 285
      end: 356
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 285
      end: 357
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 285
      end: 357
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest2(){
        IJsonSerializer serializer = new JsonNetSerializer();
        IDateTimeProvider provider = new UtcDateTimeProvider();
        IJwtValidator validator = new JwtValidator(serializer, provider);
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
        var json = decoder.Decode(token, "secret123");
        Console.WriteLine(json);
      }
    }
  : labels:
    - source: decoder.Decode(token, "secret123")
      style: primary
      start: 513
      end: 547
    - source: decoder
      style: secondary
      start: 513
      end: 520
    - source: Decode
      style: secondary
      start: 521
      end: 527
    - source: decoder.Decode
      style: secondary
      start: 513
      end: 527
    - source: secret123
      style: secondary
      start: 536
      end: 545
    - source: '"secret123"'
      style: secondary
      start: 535
      end: 546
    - source: '"secret123"'
      style: secondary
      start: 535
      end: 546
    - source: (token, "secret123")
      style: secondary
      start: 527
      end: 547
    - source: IJwtDecoder
      style: secondary
      start: 414
      end: 425
    - source: decoder
      style: secondary
      start: 426
      end: 433
    - source: decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm)
      style: secondary
      start: 426
      end: 496
    - source: IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm)
      style: secondary
      start: 414
      end: 496
    - source: IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
      style: secondary
      start: 414
      end: 497
    - source: IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
      style: secondary
      start: 414
      end: 497
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar{
      public void JwtTest20(){
        IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
        IJsonSerializer serializer = new JsonNetSerializer();
        IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
        IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
        var token = encoder.Encode(new Dictionary<string, object>
        {
            { "userId", "999" },
            { "role", "admin" }
        }, "hardcodedTokenSecret987");
        Console.WriteLine(token);
      }
    }
  : labels:
    - source: |-
        encoder.Encode(new Dictionary<string, object>
            {
                { "userId", "999" },
                { "role", "admin" }
            }, "hardcodedTokenSecret987")
      style: primary
      start: 374
      end: 516
    - source: encoder
      style: secondary
      start: 374
      end: 381
    - source: Encode
      style: secondary
      start: 382
      end: 388
    - source: encoder.Encode
      style: secondary
      start: 374
      end: 388
    - source: hardcodedTokenSecret987
      style: secondary
      start: 491
      end: 514
    - source: '"hardcodedTokenSecret987"'
      style: secondary
      start: 490
      end: 515
    - source: '"hardcodedTokenSecret987"'
      style: secondary
      start: 490
      end: 515
    - source: |-
        (new Dictionary<string, object>
            {
                { "userId", "999" },
                { "role", "admin" }
            }, "hardcodedTokenSecret987")
      style: secondary
      start: 388
      end: 516
    - source: IJwtEncoder
      style: secondary
      start: 285
      end: 296
    - source: encoder
      style: secondary
      start: 297
      end: 304
    - source: encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 297
      end: 356
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 285
      end: 356
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 285
      end: 357
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 285
      end: 357
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
