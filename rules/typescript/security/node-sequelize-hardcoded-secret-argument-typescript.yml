id: node-sequelize-hardcoded-secret-argument-typescript
language: typescript
severity: warning
message: >-
  A secret is hard-coded in the application. Secrets stored in source
  code, such as credentials, identifiers, and other types of sensitive data,
  can be leaked and used by internal or external malicious actors. Use
  environment variables to securely provide credentials and other secrets or
  retrieve them from a secure vault or Hardware Security Module (HSM).
note: >-
  [CWE-287] Improper Authentication.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
ast-grep-essentials: true
utils:
  Match_pattern_directly:
   kind: string
   all:
     - has:
           kind: string_fragment
     - nthChild: 
        position: 3
        ofRule:
          not:
            kind: comment
     - inside:
         kind: arguments
         all:
           - has:
               nthChild: 
                position: 4
                ofRule:
                  not:
                    kind: comment
           - not:
               has:
                 nthChild: 
                    position: 5
                    ofRule:
                      not:
                        kind: comment
           - inside:
               kind: new_expression
               all:
               - has:
                  kind: identifier
                  pattern: $SQL
               - any:
                 - inside:
                     stopBy: end
                     follows:
                      stopBy: end
                      any:
                        - pattern: $SQL = require('sequelize');
                        - pattern: const $SQL = require('sequelize');
                        - pattern: var $SQL = require('sequelize');
                        - pattern: let $SQL = require('sequelize');
                        - pattern: import $SQL from 'sequelize';
                        - pattern: import * as $SQL from 'sequelize';
                        - kind: import_statement
                          all:
                            - has:
                                kind: import_clause
                                has:
                                  stopBy: end
                                  pattern: $SQL
                            - has:
                                kind: string
                                has:
                                  kind: string_fragment
                                  regex: ^sequelize$
     - not:
         inside:
           stopBy: end
           kind: enum_declaration
           
  Match_pattern_with_Instance:
   kind: identifier
   pattern: $PASS
   all:
     - nthChild: 
        position: 3
        ofRule:
          not:
            kind: comment
     - inside:
         kind: arguments
         all:
           - not:
               has:
                 nthChild: 
                    position: 5
                    ofRule:
                      not:
                        kind: comment
           - has:
               nthChild: 
                position: 4
                ofRule:
                  not:
                    kind: comment
           - inside:
               kind: new_expression
               all:
               - has:
                  kind: identifier
                  pattern: $SQL
               - any:
                 - inside:
                     stopBy: end
                     follows:
                      stopBy: end
                      any:
                        - pattern: $SQL = require('sequelize');
                        - pattern: const $SQL = require('sequelize');
                        - pattern: var $SQL = require('sequelize');
                        - pattern: let $SQL = require('sequelize');
                        - pattern: import $SQL from 'sequelize';
                        - pattern: import * as $SQL from 'sequelize';
                        - kind: import_statement
                          all:
                            - has:
                                kind: import_clause
                                has:
                                  stopBy: end
                                  pattern: $SQL
                            - has:
                                kind: string
                                has:
                                  kind: string_fragment
                                  regex: ^sequelize$
     - inside:
         stopBy: end
         follows:
           stopBy: end
           any:
             - kind: lexical_declaration
               not:
                 has:
                   regex: ^let$
               has:
                kind: variable_declarator
                all:
                  - has:
                      kind: identifier
                      pattern: $PASS
                  - has:
                     kind: string
                     has:
                       kind: string_fragment
     - not:
         inside:
           stopBy: end
           kind: enum_declaration
rule:
 any:
   - matches: Match_pattern_directly
   - matches: Match_pattern_with_Instance