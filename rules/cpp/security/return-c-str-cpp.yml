id: return-c-str-cpp
language: cpp
severity: warning
message: >-
  "`$FUNC` returns a pointer to the memory owned by `$STR`. This pointer
      is invalid after `$STR` goes out of scope, which can trigger a use after
      free."
note: >-
  [CWE-416] Use After Free
  [REFERENCES]
      - https://wiki.sei.cmu.edu/confluence/display/c/DCL30-C.+Declare+objects+with+appropriate+storage+durations
      - https://wiki.sei.cmu.edu/confluence/display/cplusplus/EXP54-CPP.+Do+not+access+an+object+outside+of+its+lifetime

utils:
  util_for_declaration_inside_function:
    kind: return_statement
    pattern: return $STR.$METHOD();
    follows:
      kind: declaration
      stopBy: end
      any:
        - pattern: string $STR;
        - pattern: wstring $STR;
        - pattern: basic_string $STR;
        - pattern: std::string $STR;
        - pattern: std::wstring $STR;
        - pattern: std::basic_string<$TYPE> $STR;

  util_for_assignment_inside_function:
    kind: return_statement
    pattern: return $STR.$METHOD();
    follows:
      kind: declaration
      stopBy: end
      any:
        - pattern: string $STR = string($STRING);
        - pattern: wstring $STR = wstring($STRING);
        - pattern: basic_string<$TYPE> $STR = basic_string<$TYPE>($STRING);
        - pattern: std::string $STR = std::string($STRING);
        - pattern: std::wstring $STR = std::wstring($STRING);
        - pattern: std::basic_string<$TYPE> $STR = std::basic_string<$TYPE>($STRING);

  util_for_func_params:
    kind: return_statement
    pattern: return $STR.$METHOD();
    inside:
      stopBy: end
      kind: function_definition
      has:
        stopBy: end
        kind: parameter_list
        has:
          stopBy: end
          kind: parameter_declaration
          has:
            stopBy: end
            kind: identifier
            field: declarator
            pattern: $STR
          any:
            - has:
                any:
                  - kind: type_identifier
                    pattern: $IDENTIFIFER
                  - kind: qualified_identifier
                    any:
                      - all:
                          - has:
                              kind: namespace_identifier
                              pattern: $NAMESPACE_IDEN
                          - has:
                              kind: template_type
                              all:
                                - has:
                                    kind: type_identifier
                                    field: name
                                    pattern: $BASIC_STR
                                    precedes:
                                      kind: template_argument_list
                      - pattern: $IDENTIFIFER
                  - kind: template_type
                    has:
                      kind: type_identifier
                      field: name
                      pattern: $BASIC_STR
                      precedes:
                        kind: template_argument_list

rule:
  any:
    - matches: util_for_declaration_inside_function
    - matches: util_for_assignment_inside_function
    - matches: util_for_func_params
    - pattern: return basic_string<$TYPE>($$$).$METHOD();
    - pattern: return std::basic_string<$TYPE>($$$).$METHOD();
    - pattern: return string($$$).$METHOD();
    - pattern: return std::string($$$).$METHOD();
    - pattern: return wstring($$$).$METHOD();
    - pattern: return std::wstring($$$).$METHOD();

constraints:
  METHOD:
    regex: ^(c_str|data)$
  IDENTIFIFER:
    regex: ^(string|wstring|std::string|std::wstring)$
  BASIC_STR:
    regex: ^(basic_string)$
  NAMESPACE_IDEN:
    regex: ^(std)$
