id: ruby-pg-hardcoded-secret-ruby
language: ruby
severity: warning
message: >-
  A secret is hard-coded in the application. Secrets stored in source
  code, such as credentials, identifiers, and other types of sensitive data,
  can be leaked and used by internal or external malicious actors. Use
  environment variables to securely provide credentials and other secrets or
  retrieve them from a secure vault or Hardware Security Module (HSM).
note: >-
  [CWE-798] Use of Hard-coded Credentials.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html

ast-grep-essentials: true

utils:
  PG.connect(password:""):
    # PG::Connection.new(..., password: '', ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: constant
          regex: ^PG$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: pair
            all:
              - has:
                  stopBy: neighbor
                  any:
                    - regex: ^password$
                      not:
                        precedes:
                          regex: ^=>$
                    - regex: ^:password$
              - has:
                  stopBy: neighbor
                  kind: string
                  has:
                   stopBy: neighbor
                   kind: string_content
      - any:
        - inside:
            stopBy: end
            follows:
              stopBy: end
              kind: call
              pattern: require "pg"
        - follows:
              stopBy: end
              kind: call
              pattern: require "pg"
  PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, ""):
    # PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "", ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: constant
          regex: ^PG$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: string
            nthChild: 7
            has:
                stopBy: neighbor
                kind: string_content
      - any:
        - inside:
            stopBy: end
            follows:
              stopBy: end
              kind: call
              pattern: require "pg"
        - follows:
              stopBy: end
              kind: call
              pattern: require "pg"
  PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, ""):
    # PG::Connection.connect_start($HOST, $PORT, $OPS, $TTY, $DB, $USER,"", ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: scope_resolution
          regex: ^PG::Connection$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect_start$|^new$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: string
            nthChild: 7
            has:
                stopBy: neighbor
                kind: string_content
      - any:
        - inside:
            stopBy: end
            follows:
              stopBy: end
              kind: call
              pattern: require "pg"
        - follows:
              stopBy: end
              kind: call
              pattern: require "pg"
  PG::Connection.new(password:""):
  # PG::Connection.new(..., password: '', ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: scope_resolution
          regex: ^PG::Connection$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^new$|^connect_start$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: pair
            all:
              - has:
                  stopBy: neighbor
                  any:
                    - regex: ^password$
                      not:
                        precedes:
                          regex: ^=>$
                    - regex: ^:password$
              - has:
                  stopBy: neighbor
                  kind: string
                  has:
                      stopBy: neighbor
                      kind: string_content
      - any:
        - inside:
            stopBy: end
            follows:
              stopBy: end
              kind: call
              pattern: require "pg"
        - follows:
              stopBy: end
              kind: call
              pattern: require "pg"
rule:
  kind: call
  any:
    - matches: PG.connect(password:"")
    - matches: PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")
    - matches: PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")
    - matches: PG::Connection.new(password:"")
  not:
   all:
    - has:
        stopBy: end
        kind: ERROR
    - inside:
        stopBy: end
        kind: ERROR
        