id: ruby-faraday-hardcoded-secret-ruby
language: ruby
severity: warning
message: >-
  A secret is hard-coded in the application. Secrets stored in source
  code, such as credentials, identifiers, and other types of sensitive data,
  can be leaked and used by internal or external malicious actors. Use
  environment variables to securely provide credentials and other secrets or
  retrieve them from a secure vault or Hardware Security Module (HSM).
note: >-
  [CWE-798] Use of Hard-coded Credentials.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html

ast-grep-essentials: true

utils:
  $X.request :authorization, :basic, $USER, "...":
    kind: call
    all:
      - has:
          kind: identifier
          nthChild: 2
          regex: ^request$
      - has:
         kind: argument_list
         nthChild: 3
         all:
          - has:
              regex: ^:authorization$
              nthChild: 
               position: 1
               ofRule:
                not:
                 kind: comment
          - has:
              regex: ^:basic$
              nthChild: 
               position: 2
               ofRule:
                not:
                 kind: comment
          - has:
             any:
             - kind: chained_string
               has: 
                 kind: string
                 has:
                  kind: string_content
                 nthChild: 
                  position: 4
                  ofRule:
                   not:
                    kind: comment
             - kind: string
               has:
                kind: string_content
               nthChild: 
                position: 4
                ofRule:
                 not:
                  kind: comment
          - not:
              has:
               nthChild: 
                position: 5
                ofRule:
                 not:
                  kind: comment
      - any:
        - inside:
           stopBy: end
           follows:
            stopBy: end
            kind: call
            pattern: require "faraday"
        - follows:
           stopBy: end
           kind: call
           pattern: require "faraday"

  $Instance($X.request :authorization, :basic, $USER, "..."):
    kind: call
    all:
      - has:
          kind: identifier
          nthChild: 2
          regex: ^request$
      - has:
         kind: argument_list
         nthChild: 3
         all:
          - has:
              regex: ^:authorization$
              nthChild: 
               position: 1
               ofRule:
                not:
                 kind: comment
          - has:
              regex: ^:basic$
              nthChild: 
               position: 2
               ofRule:
                not:
                 kind: comment
          - has:
              pattern: $STRING
              kind: identifier
              nthChild: 
               position: 4
               ofRule:
                not:
                 kind: comment
          - not:
              has:
                nthChild: 
                  position: 5
                  ofRule:
                    not:
                      kind: comment
      - any:
        - inside:
           stopBy: end
           follows:
            stopBy: end
            kind: call
            pattern: require "faraday"
        - follows:
           stopBy: end
           kind: call
           pattern: require "faraday"
      - any:
          - follows:
              stopBy: end
              kind: assignment 
              pattern: $STRING = $PASSWORD
          - inside:
              stopBy: end
              follows:
               stopBy: end
               kind: assignment 
               pattern: $STRING = $PASSWORD

  $X.request :basic_auth, $USER, "...":
    kind: call
    all:
      - has:
          kind: identifier
          nthChild: 2
          regex: ^request$
      - has:
          kind: argument_list
          nthChild: 3
          all:
            - has:
                regex: ^:basic_auth$
                nthChild: 
                 position: 1
                 ofRule:
                    not:
                     kind: comment
            - has:
                any:
                - kind: chained_string
                  has: 
                   kind: string
                   has:
                    kind: string_content
                    position: 3
                    ofRule:
                     not:
                      kind: comment
                - kind: string
                  has:
                   kind: string_content
                  nthChild: 
                   position: 3
                   ofRule:
                    not:
                     kind: comment
            - not:
               has:
                nthChild: 
                 position: 4
                 ofRule:
                  not:
                   kind: comment
      - any:
          - follows:
              stopBy: end
              kind: call
              pattern: require "faraday"
          - inside:
              stopBy: end
              follows:
               stopBy: end
               kind: call
               pattern: require "faraday"
 
  Instance( $X.request :basic_auth, $USER, "..."):
    kind: call
    all:
      - has:
          kind: identifier
          nthChild: 2
          regex: ^request$
      - has:
          kind: argument_list
          nthChild: 3
          all:
            - has:
                regex: ^:basic_auth$
                nthChild: 
                 position: 1
                 ofRule:
                    not:
                     kind: comment
            - has:
                kind: identifier
                pattern: $STRING
                nthChild: 
                 position: 3
                 ofRule:
                    not:
                     kind: comment
            - not:
               has:
                nthChild: 
                 position: 4
                 ofRule:
                  not:
                   kind: comment
      - any:
          - follows:
              stopBy: end
              kind: call
              pattern: require "faraday"
          - inside:
              stopBy: end
              follows:
               stopBy: end
               kind: call
               pattern: require "faraday"
      - any:
          - follows:
              stopBy: end
              kind: assignment
              pattern: $STRING = $PASSWORD
          - inside:
              stopBy: end
              follows:
               stopBy: end
               kind: assignment
               pattern: $STRING = $PASSWORD

  $X.request :token_auth, "...", ...:
    kind: call
    all:
      - has:
          kind: identifier
          nthChild: 2
          regex: ^request$
      - has:
         kind: argument_list
         nthChild: 3
         all:
          - has:
              regex: ^:token_auth$
              nthChild: 
               position: 1
               ofRule:
                not:
                 kind: comment
          - has:
             any:
             - kind: chained_string
               has: 
                 kind: string
                 has:
                  kind: string_content
                  position: 2
                  ofRule:
                  not:
                   kind: comment
             - kind: string
               has:
                kind: string_content
                position: 2
                ofRule:
                 not:
                  kind: comment
      - any:
        - inside:
           stopBy: end
           follows:
            stopBy: end
            kind: call
            pattern: require "faraday"
        - follows:
           stopBy: end
           kind: call
           pattern: require "faraday"
   
  Instance($X.request :token_auth, "...", ...):
    kind: call
    all:
      - has:
          kind: identifier
          nthChild: 2
          regex: ^request$
      - has:
         kind: argument_list
         nthChild: 3
         all:
          - has:
              regex: ^:token_auth$
              nthChild: 
               position: 1
               ofRule:
                not:
                 kind: comment
          - has:
             kind: identifier
             pattern: $STRING
             nthChild: 
               position: 2
               ofRule:
                  not:
                   kind: comment
      - any:
        - inside:
           stopBy: end
           follows:
            stopBy: end
            kind: call
            pattern: require "faraday"
        - follows:
           stopBy: end
           kind: call
           pattern: require "faraday"
      - any:
          - follows:
              stopBy: end
              kind: assignment
              pattern: $STRING = $PASSWORD
          - inside:
              stopBy: end
              follows:
               stopBy: end
               kind: assignment
               pattern: $STRING = $PASSWORD

  $X.request :authorization, $BEARER, "...":
    kind: call
    all:
      - has:
          kind: identifier
          nthChild: 2
          regex: ^request$
      - has:
         kind: argument_list
         nthChild: 3
         all:
          - has:
              regex: ^:authorization$
              nthChild: 
               position: 1
               ofRule:
                not:
                 kind: comment
          - has:
              nthChild: 
               position: 2
               ofRule:
                not:
                 kind: comment
          - has:
             any:
             - kind: chained_string
               has: 
                 kind: string
                 has:
                  kind: string_content
                 nthChild: 
                   position: 3
                   ofRule:
                    not:
                     kind: comment
             - kind: string
               has:
                kind: string_content
               nthChild:  
                position: 3
                ofRule:
                 not:
                  kind: comment
          - not:
              has:
               nthChild: 
                position: 4
                ofRule:
                 not:
                  kind: comment
      - any:
        - inside:
           stopBy: end
           follows:
            stopBy: end
            kind: call
            pattern: require "faraday"
        - follows:
           stopBy: end
           kind: call
           pattern: require "faraday"

  Instance($X.request :authorization, $BEARER, "..."):
    kind: call
    all:
      - has:
          kind: identifier
          nthChild: 2
          regex: ^request$
      - has:
         kind: argument_list
         nthChild: 3
         all:
          - has:
              regex: ^:authorization$
              nthChild: 
               position: 1
               ofRule:
                not:
                 kind: comment
          - has:
              nthChild: 
               position: 2
               ofRule:
                not:
                 kind: comment
          - has:
             kind: identifier
             pattern: $STRING
             nthChild: 
                position: 3
                ofRule:
                  not:
                   kind: comment
          - not:
              has:
               nthChild: 
                position: 4
                ofRule:
                 not:
                  kind: comment
      - any:
        - inside:
           stopBy: end
           follows:
            stopBy: end
            kind: call
            pattern: require "faraday"
        - follows:
           stopBy: end
           kind: call
           pattern: require "faraday"
      - any:
          - follows:
              stopBy: end
              kind: assignment
              pattern: $STRING = $PASSWORD
          - inside:
              stopBy: end
              follows:
               stopBy: end
               kind: assignment
               pattern: $STRING = $PASSWORD

rule:
  kind: call
  any:
    - matches: $X.request :authorization, :basic, $USER, "..."
    - matches: $Instance($X.request :authorization, :basic, $USER, "...")
    - matches: $X.request :basic_auth, $USER, "..."
    - matches: Instance( $X.request :basic_auth, $USER, "...")
    - matches: $X.request :token_auth, "...", ...
    - matches: Instance($X.request :token_auth, "...", ...)
    - matches: $X.request :authorization, $BEARER, "..."
    - matches: Instance($X.request :authorization, $BEARER, "...")
  all:
      - not:
         has:
          stopBy: end
          kind: ERROR
      - not:
         inside:
          stopBy: end
          kind: ERROR
constraints:
  PASSWORD:
    kind: string
    has:
      kind: string_content
