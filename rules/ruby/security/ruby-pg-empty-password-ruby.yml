id: ruby-pg-empty-password-ruby
language: ruby
severity: warning
message: >-
  The application creates a database connection with an empty password.
  This can lead to unauthorized access by either an internal or external
  malicious actor. To prevent this vulnerability, enforce authentication
  when connecting to a database by using environment variables to securely
  provide credentials or retrieving them from a secure vault or HSM
  (Hardware Security Module).
note: >-
  [CWE-287] Improper Authentication.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html

ast-grep-essentials: true

utils:
  PG.connect(password:""):
    # PG.connect(..., password: "", ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: constant
          regex: ^PG$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: pair
            all:
              - has:
                  stopBy: neighbor
                  any:
                    - regex: ^password$
                      not:
                        precedes:
                          regex: ^=>$
                    - regex: ^:password$
              - has:
                  stopBy: neighbor
                  kind: string
                  not:
                    has:
                      stopBy: neighbor
                      kind: string_content
  PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, ""):
    # PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "", ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: constant
          regex: ^PG$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: string
            nthChild: 7
            not:
              has:
                stopBy: neighbor
                kind: string_content
  PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, ""):
    # PG::Connection.connect_start($HOST, $PORT, $OPS, $TTY, $DB, $USER,"", ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: scope_resolution
          regex: ^PG::Connection$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect_start$|^new$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: string
            nthChild: 7
            not:
              has:
                stopBy: neighbor
                kind: string_content
  PG::Connection.new(password:""):
  # PG::Connection.new(..., password: '', ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: scope_resolution
          regex: ^PG::Connection$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^new$|^connect_start$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: pair
            all:
              - has:
                  stopBy: neighbor
                  any:
                    - regex: ^password$
                      not:
                        precedes:
                          regex: ^=>$
                    - regex: ^:password$
              - has:
                  stopBy: neighbor
                  kind: string
                  not:
                    has:
                      stopBy: neighbor
                      kind: string_content
rule:
  kind: call
  any:
    - matches: PG.connect(password:"")
    - matches: PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")
    - matches: PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")
    - matches: PG::Connection.new(password:"")
  not:
   all:
    - has:
        stopBy: end
        kind: ERROR
    - inside:
        stopBy: end
        kind: ERROR