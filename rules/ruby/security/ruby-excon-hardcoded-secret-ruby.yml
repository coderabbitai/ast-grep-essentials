id: ruby-excon-hardcoded-secret-ruby
language: ruby
severity: warning
message: >-
  A secret is hard-coded in the application. Secrets stored in source
  code, such as credentials, identifiers, and other types of sensitive data,
  can be leaked and used by internal or external malicious actors. Use
  environment variables to securely provide credentials and other secrets or
  retrieve them from a secure vault or Hardware Security Module (HSM).
note: >-
  [CWE-798] Use of Hard-coded Credentials.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html

ast-grep-essentials: true

utils:
 Excon.new(..., :password => "...", ...):
        # Excon.new(..., :password => "...", ...)
     kind: call
     all:
     - has:
        stopBy: neighbor
        kind: constant
        regex: ^Excon$
     - has:
           stopBy: neighbor
           regex: ^.$
     - has:
           stopBy: neighbor
           kind: identifier
           regex: ^new$
     - has:
        stopBy: neighbor      
        kind: argument_list
        has:
         stopBy: neighbor
         kind: pair
         all:
         - has:
            stopBy: neighbor
            kind: simple_symbol 
            regex: ^:password$
         - has:
              stopBy: neighbor
              kind: string
              
     - any:
        - inside:
           stopBy: end
           follows:
             stopBy: end
             kind: call
             pattern: require 'excon'
        - follows:
             stopBy: end
             kind: call
             pattern: require 'excon'
        
 Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...):
    # Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)
   kind: call
   all:
     - has:
        stopBy: neighbor
        kind: constant
        regex: ^Excon$
     - has:
           stopBy: neighbor
           regex: ^.$
     - has:
           stopBy: neighbor
           kind: identifier
           regex: ^new$
     - has:
        stopBy: neighbor      
        kind: argument_list
        has:
         stopBy: neighbor
         kind: pair
         all:
         - has:
            stopBy: neighbor
            kind: simple_symbol 
            regex: ^:password$
         - has:
              stopBy: neighbor
              kind: call
              all:
                 - has:
                      stopBy: neighbor
                      kind: scope_resolution
                      regex: ^Excon::Utils$
                 - has:
                      stopBy: neighbor
                      regex: ^.$
                 - has:
                      stopBy: neighbor
                      kind: identifier
                      regex: ^escape_uri$
                 - has:
                      stopBy: neighbor
                      kind: argument_list
                      has:
                         stopBy: neighbor
                         kind: string
     - any:
        - inside:
           stopBy: end
           follows:
             stopBy: end
             kind: call
             pattern: require 'excon'
        - follows:
             stopBy: end
             kind: call
             pattern: require 'excon'

 Excon.new(..., :password => "...", ...)_instance:
        # Excon.new(..., :password => "...", ...)
     kind: call
     all:
     - has:
        stopBy: neighbor
        kind: constant
        regex: ^Excon$
     - has:
           stopBy: neighbor
           regex: ^.$
     - has:
           stopBy: neighbor
           kind: identifier
           regex: ^new$
     - has:
        stopBy: neighbor      
        kind: argument_list
        has:
         stopBy: neighbor
         kind: pair
         all:
         - has:
            stopBy: neighbor
            kind: simple_symbol 
            regex: ^:password$
         - has:
              stopBy: neighbor
              kind: identifier
              pattern: $VAR
     - any:
        - inside:
           stopBy: end
           follows:
             stopBy: end
             kind: call
             pattern: require 'excon'
        - follows:
             stopBy: end
             kind: call
             pattern: require 'excon'
     - any:
          - inside:
               stopBy: end
               follows:
                stopBy: end
                kind: assignment
                all:
                   - has:
                        kind: identifier
                        pattern: $VAR
                   - has:
                        kind: string
                        

 Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)_instance:
    # Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)
   kind: call
   all:
     - has:
        stopBy: neighbor
        kind: constant
        regex: ^Excon$
     - has:
           stopBy: neighbor
           regex: ^.$
     - has:
           stopBy: neighbor
           kind: identifier
           regex: ^new$
     - has:
        stopBy: neighbor      
        kind: argument_list
        has:
         stopBy: neighbor
         kind: pair
         all:
         - has:
            stopBy: neighbor
            kind: simple_symbol 
            regex: ^:password$
         - has:
              kind: identifier
              pattern: $VAR
     - any:
        - inside:
             stopBy: end
             follows:
              stopBy: end
              kind: assignment
              pattern: $VAR = Excon::Utils.escape_uri('$$$')
        - follows:
              stopBy: end
              kind: assignment
              pattern: $VAR = Excon::Utils.escape_uri('$$$')
     - any:
        - inside:
           stopBy: end
           follows:
             stopBy: end
             kind: call
             pattern: require 'excon'
        - follows:
             stopBy: end
             kind: call
             pattern: require 'excon'

rule:
    kind: call
    any:
        - matches: Excon.new(..., :password => "...", ...)
        - matches: Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)
        
        - matches: Excon.new(..., :password => "...", ...)_instance
        - matches: Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)_instance
    all:
      - not:
            has:
                stopBy: end
                kind: ERROR
      - not:
            inside:
                stopBy: end
                kind: ERROR
