id: node-sequelize-hardcoded-secret-argument-javascript
language: javascript
severity: warning
message: >-
  A secret is hard-coded in the application. Secrets stored in source
  code, such as credentials, identifiers, and other types of sensitive data,
  can be leaked and used by internal or external malicious actors. Use
  environment variables to securely provide credentials and other secrets or
  retrieve them from a secure vault or Hardware Security Module (HSM).
note: >-
  [CWE-287] Improper Authentication.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
utils:
    MATCH_BLANK_PASSWORD:
        kind: string
        pattern: $Q
        inside:
               stopBy: end
               kind: lexical_declaration
               all:
                - has:
                   stopBy: end
                   kind: new_expression
                   all:
                   - has:
                      stopBy: end
                      kind: identifier
                      pattern: $E
                   - has:
                      stopBy: end
                      kind: arguments
                      nthChild: 2
                      has:
                       stopBy: end
                       kind: string
                       nthChild: 3
                       pattern: $Q
                       has:
                            stopBy: end
                            kind: string_fragment
                - follows:
                      stopBy: end
                      any:
                        - pattern: const $E = require('sequelize')
                        - pattern: import $E from 'sequelize'
                        - pattern: import * as $E from 'sequelize'
                        - pattern: import {$E} from 'sequelize'
    MATCH_BLANK_PASSWORD_with_instance:
        kind: identifier
        pattern: $W
        inside:
               stopBy: end
               kind: lexical_declaration
               all:
                - has:
                   stopBy: end
                   kind: new_expression
                   all:
                   - has:
                      stopBy: end
                      kind: identifier
                      pattern: $E
                   - has:
                      stopBy: end
                      kind: arguments
                      nthChild: 2
                      has:
                       stopBy: end
                       kind: identifier
                       nthChild: 3
                       pattern: $W
                - follows:
                      stopBy: end
                      any:
                        - pattern: const $E = require('sequelize')
                        - pattern: import $E from 'sequelize'
                        - pattern: import * as $E from 'sequelize'
                        - pattern: import {$E} from 'sequelize'  
                - follows:
                   stopBy: end
                   any:
                      - pattern: $W = $R
                      - pattern: let $W = $R
rule:
  any:
     - kind: string
       matches: MATCH_BLANK_PASSWORD
     - kind: identifier
       matches: MATCH_BLANK_PASSWORD_with_instance
constraints:
   R:
    kind: string
    has:
       stopBy: neighbor
       kind: string_fragment
    
