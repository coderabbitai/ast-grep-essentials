id: empty-password-rust
language: rust
severity: warning
message: >-
  The application uses an empty credential. This can lead to unauthorized
  access by either an internal or external malicious actor. It is
  recommended to rotate the secret and retrieve them from a secure secret
  vault or Hardware Security Module (HSM), alternatively environment
  variables can be used if allowed by your company policy.
note: >-
  [CWE-87]: Improper Authentication
  [REFERENCES]
    - https://docs.rs/sqlx/latest/sqlx/
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
ast-grep-essentials: true
utils:
  
  MySqlConnectOptions::new(...). ... .password(""):
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: scoped_identifier
                  regex: ^MySqlConnectOptions::new$
                  precedes:
                    kind: arguments
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: string_literal
            not:
              has:
                kind: string_content
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: use_declaration
                has:
                  kind: scoped_identifier
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::mysql$
                    - has:
                        kind: identifier
                        regex: ^MySqlConnectOptions$
              - kind: use_declaration
                has:
                  kind: scoped_use_list
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::mysql$
                    - has:
                        kind: use_list
                        has:
                          kind: identifier
                          regex: ^MySqlConnectOptions$

  PgConnectOptions::new(...). ... .password(""):
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: scoped_identifier
                  regex: ^PgConnectOptions::new$
                  precedes:
                    kind: arguments
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: string_literal
            not:
              has:
                kind: string_content
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: use_declaration
                has:
                  kind: scoped_identifier
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::postgres$
                    - has:
                        kind: identifier
                        regex: ^PgConnectOptions$
              - kind: use_declaration
                has:
                  kind: scoped_use_list
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::postgres$
                    - has:
                        kind: use_list
                        has:
                          kind: identifier
                          regex: ^PgConnectOptions$

  sqlx::mysql::MySqlConnectOptions::new(...). ... .password(""):
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: scoped_identifier
                  regex: ^sqlx::mysql::MySqlConnectOptions::new$
                  precedes:
                    kind: arguments
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: string_literal
            not:  
              has:
                kind: string_content
      
  sqlx::postgres::PgConnectOptions::new(...). ... .password(""):
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: scoped_identifier
                  regex: ^sqlx::postgres::PgConnectOptions::new$
                  precedes:
                    kind: arguments
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: string_literal
            not:  
              has:
                kind: string_content

  $PgConnectOptions::new(...). ... .password(""):      
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                stopBy: end
                kind: identifier
                pattern: $INSTANCE
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: string_literal
            not:  
              has:
                kind: string_content
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: use_declaration
                has:
                  kind: scoped_identifier
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::postgres$
                    - has:
                        kind: identifier
                        regex: ^PgConnectOptions$
              - kind: use_declaration
                has:
                  kind: scoped_use_list
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::postgres$
                    - has:
                        kind: use_list
                        has:
                          kind: identifier
                          regex: ^PgConnectOptions$
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $INSTANCE
                      nthChild: 1
                  - has:
                      kind: call_expression
                      nthChild: 2
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^PgConnectOptions::new$
                        - has:
                            kind: arguments

  $MySqlConnectOptions::new(...). ... .password(""):      
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                stopBy: end
                kind: identifier
                pattern: $INSTANCE
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: string_literal
            not:  
              has:
                kind: string_content
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: use_declaration
                has:
                  kind: scoped_identifier
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::mysql$
                    - has:
                        kind: identifier
                        regex: ^MySqlConnectOptions$
              - kind: use_declaration
                has:
                  kind: scoped_use_list
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::mysql$
                    - has:
                        kind: use_list
                        has:
                          kind: identifier
                          regex: ^MySqlConnectOptions$
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $INSTANCE
                      nthChild: 1
                  - has:
                      kind: call_expression
                      nthChild: 2
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^MySqlConnectOptions::new$
                        - has:
                            kind: arguments

  $MySqlConnectOptions::new(...). ... .password("")_with_Instance:      
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                stopBy: end
                kind: identifier
                pattern: $INSTANCE
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: identifier
            pattern: $STR
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: use_declaration
                has:
                  kind: scoped_identifier
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::mysql$
                    - has:
                        kind: identifier
                        regex: ^MySqlConnectOptions$
              - kind: use_declaration
                has:
                  kind: scoped_use_list
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::mysql$
                    - has:
                        kind: use_list
                        has:
                          kind: identifier
                          regex: ^MySqlConnectOptions$
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $INSTANCE
                      nthChild: 1
                  - has:
                      kind: call_expression
                      nthChild: 2
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^MySqlConnectOptions::new$
                        - has:
                            kind: arguments
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                    - has:
                        kind: identifier
                        pattern: $STR
                    - has:
                        kind: string_literal
                        not:  
                          has:
                            kind: string_content
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $STR
                  - has:
                      kind: string_literal
                      not:  
                        has:
                          kind: string_content

  $PgConnectOption::new(...). ... .password("")_with_Instance:      
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                stopBy: end
                kind: identifier
                pattern: $INSTANCE
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: identifier
            pattern: $STR
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: use_declaration
                has:
                  kind: scoped_identifier
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::postgres$
                    - has:
                        kind: identifier
                        regex: ^PgConnectOptions$
              - kind: use_declaration
                has:
                  kind: scoped_use_list
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::postgres$
                    - has:
                        kind: use_list
                        has:
                          kind: identifier
                          regex: ^PgConnectOptions$
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $INSTANCE
                      nthChild: 1
                  - has:
                      kind: call_expression
                      nthChild: 2
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^PgConnectOption::new$
                        - has:
                            kind: arguments
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                    - has:
                        kind: identifier
                        pattern: $STR
                    - has:
                        kind: string_literal
                        not:  
                          has:
                            kind: string_content
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $STR
                  - has:
                      kind: string_literal
                      not:  
                        has:
                          kind: string_content

  sqlx::postgres::PgConnectOptions::new(...). ... .password("")_with_Instance:
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: scoped_identifier
                  regex: ^sqlx::postgres::PgConnectOptions::new$
                  precedes:
                    kind: arguments
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: identifier
            pattern: $STR
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                    - has:
                        kind: identifier
                        pattern: $STR
                    - has:
                        kind: string_literal
                        not:  
                          has:
                            kind: string_content
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $STR
                  - has:
                      kind: string_literal
                      not:  
                        has:
                          kind: string_content

  sqlx::mysql::MySqlConnectOptions::new(...). ... .password("")_with_Instance:
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: scoped_identifier
                  regex: ^sqlx::mysql::MySqlConnectOptions::new$
                  precedes:
                    kind: arguments
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: identifier
            pattern: $STR
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                    - has:
                        kind: identifier
                        pattern: $STR
                    - has:
                        kind: string_literal
                        not: 
                         has:
                            kind: string_content
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $STR
                  - has:
                      kind: string_literal
                      not:  
                        has:
                          kind: string_content

  PgConnectOptions::new(...). ... .password("")_with_Instance:
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: scoped_identifier
                  regex: ^PgConnectOptions::new$
                  precedes:
                    kind: arguments
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: identifier
            pattern: $STR
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: use_declaration
                has:
                  kind: scoped_identifier
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::postgres$
                    - has:
                        kind: identifier
                        regex: ^PgConnectOptions$
              - kind: use_declaration
                has:
                  kind: scoped_use_list
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::postgres$
                    - has:
                        kind: use_list
                        has:
                          kind: identifier
                          regex: ^PgConnectOptions$
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                    - has:
                        kind: identifier
                        pattern: $STR
                    - has:
                        kind: string_literal
                        not:  
                          has:
                            kind: string_content
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $STR
                  - has:
                      kind: string_literal
                      not:  
                        has:
                          kind: string_content

  MySqlConnectOptions::new(...). ... .password("")_with_Instance:
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: scoped_identifier
                  regex: ^MySqlConnectOptions::new$
                  precedes:
                    kind: arguments
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: identifier
            pattern: $STR
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: use_declaration
                has:
                  kind: scoped_identifier
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::mysql$
                    - has:
                        kind: identifier
                        regex: ^MySqlConnectOptions$
              - kind: use_declaration
                has:
                  kind: scoped_use_list
                  all:
                    - has:
                        kind: scoped_identifier
                        regex: ^sqlx::mysql$
                    - has:
                        kind: use_list
                        has:
                          kind: identifier
                          regex: ^MySqlConnectOptions$
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                    - has:
                        kind: identifier
                        pattern: $STR
                    - has:
                        kind: string_literal
                        not:  
                          has:
                            kind: string_content
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $STR
                  - has:
                      kind: string_literal
                      not:  
                        has:
                          kind: string_content

  let $OPTS = sqlx::mysql::MySqlConnectOptions::new(...):
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: field_expression
                  has:
                    kind: identifier
                    nthChild: 1
                    pattern: $SQL
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: string_literal
            not:  
              has:
                kind: string_content
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                  - has:
                      kind: identifier
                      pattern: $SQL
                  - has:
                      kind: call_expression
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^sqlx::mysql::MySqlConnectOptions::new$
                            precedes:
                              kind: arguments
                        - has:
                            kind: arguments
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $SQL
                  - has:
                      kind: call_expression
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^sqlx::mysql::MySqlConnectOptions::new$
                        - has:
                            kind: arguments

  let $OPTS = sqlx::postgres::PgConnectOptions::new(...):
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: field_expression
                  has:
                    kind: identifier
                    nthChild: 1
                    pattern: $SQL
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: string_literal
            not:  
              has:
                kind: string_content
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                  - has:
                      kind: identifier
                      pattern: $SQL
                  - has:
                      kind: call_expression
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^sqlx::postgres::PgConnectOptions::new$
                            precedes:
                              kind: arguments
                        - has:
                            kind: arguments
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $SQL
                  - has:
                      kind: call_expression
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^sqlx::postgres::PgConnectOptions::new$
                            precedes:
                             kind: arguments

  let $OPTS = sqlx::postgres::PgConnectOptions::new(...)_with_Instance:
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: field_expression
                  has:
                    kind: identifier
                    nthChild: 1
                    pattern: $SQL
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: identifier
            pattern: $STR
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                  - has:
                      kind: identifier
                      pattern: $SQL
                  - has:
                      kind: call_expression
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^sqlx::postgres::PgConnectOptions::new$
                            precedes:
                              kind: arguments
                        - has:
                            kind: arguments
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $SQL
                  - has:
                      kind: call_expression
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^sqlx::postgres::PgConnectOptions::new$
                        - has:
                            kind: arguments
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                    - has:
                        kind: identifier
                        pattern: $STR
                    - has:
                        kind: string_literal
                        not:  
                          has:
                            kind: string_content
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $STR
                  - has:
                      kind: string_literal
                      not:  
                        has:
                          kind: string_content

  let $OPTS = sqlx::mysql::MySqlConnectOptions::new(...)_with_Instance:
    kind: call_expression
    all:
      - has:
          kind: field_expression
          all:
            - has:
                kind: call_expression
                has:
                  stopBy: end
                  kind: field_expression
                  has:
                    kind: identifier
                    nthChild: 1
                    pattern: $SQL
            - has:
                kind: field_identifier
                regex: ^password$
      - has:
          kind: arguments
          has:
            kind: identifier
            pattern: $STR
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                  - has:
                      kind: identifier
                      pattern: $SQL
                  - has:
                      kind: call_expression
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^sqlx::mysql::MySqlConnectOptions::new$
                            precedes:
                              kind: arguments
                        - has:
                            kind: arguments
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $SQL
                  - has:
                      kind: call_expression
                      all:
                        - has:
                            kind: scoped_identifier
                            regex: ^sqlx::mysql::MySqlConnectOptions::new$
                        - has:
                            kind: arguments
      - inside:
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: expression_statement
                has:
                  kind: assignment_expression
                  all:
                    - has:
                        kind: identifier
                        pattern: $STR
                    - has:
                        kind: string_literal
                        not:  
                          has:
                            kind: string_content
              - kind: let_declaration
                all:
                  - has:
                      kind: identifier
                      pattern: $STR
                  - has:
                      kind: string_literal
                      not:
                        has:
                          kind: string_content

rule:
  any:
    - matches: MySqlConnectOptions::new(...). ... .password("")
    - matches: PgConnectOptions::new(...). ... .password("")
    - matches: sqlx::mysql::MySqlConnectOptions::new(...). ... .password("")
    - matches: sqlx::postgres::PgConnectOptions::new(...). ... .password("")
    - matches: $PgConnectOptions::new(...). ... .password("")
    - matches: $MySqlConnectOptions::new(...). ... .password("")
    - matches: $MySqlConnectOptions::new(...). ... .password("")_with_Instance
    - matches: $PgConnectOption::new(...). ... .password("")_with_Instance
    - matches: sqlx::postgres::PgConnectOptions::new(...). ... .password("")_with_Instance
    - matches: sqlx::mysql::MySqlConnectOptions::new(...). ... .password("")_with_Instance
    - matches: PgConnectOptions::new(...). ... .password("")_with_Instance
    - matches: MySqlConnectOptions::new(...). ... .password("")_with_Instance
    - matches: let $OPTS = sqlx::mysql::MySqlConnectOptions::new(...)
    - matches: let $OPTS = sqlx::postgres::PgConnectOptions::new(...)
    - matches: let $OPTS = sqlx::postgres::PgConnectOptions::new(...)_with_Instance
    - matches: let $OPTS = sqlx::mysql::MySqlConnectOptions::new(...)_with_Instance